AXI_READ_MASTER
Description:
This is an AXI4 read master module example. The module demonstrates how to
issue AXI read transactions to a memory mapped slave.  Given a starting
address offset and a transfer size in bytes, it will issue one or more AXI
transactions and return the data over an AXI4-Stream interface.

Theory of operation:
It uses a minimum subset of the AXI4 protocol by omitting AXI4 signals that
are not used.  When packaged as a kernel or IP, this allows for
optimizations to occur within the AXI Interconnect system to increase Fmax,
potentially increase performance, and reduce latency/area. When
C_INCLUDE_DATA_FIFO is set to 1, a data FIFO is included and configured so
that all transactions that are issued can fit into the FIFO.  This allows
for m_axi_rready to be tied high, and ensures that an unexpected stall
internally does not cause the AXI Interconnect system to become
inadvertantly deadlocked or cause head of line blocking to other AXI masters
in the system.

When ctrl_start is asserted, the ctrl_addr_offset (assumed 4kb aligned) and
the transfer size in bytes is registered into the module.  the The bulk of the
logic consists of counters to track how many transfers/transactions have been
issued.  When the transfer size is reached, and all transactions are
committed, then done is asserted.

Usage:
1) assign ctrl_addr_offset to a 4kB aligned starting address.
2) assign ctrl_xfer_size_in_bytes to the size in bytes of the requested transfer.
   This value will be rounded up to the nearest multiple of the interface width.
   For example a request of 100 bytes will be rounded up to 128 bytes on a 64 byte
   (512 bits) wide interface.
3) Assert ctrl_start for once cycle.  At the posedge, the ctrl_addr_offset and
   ctrl_xfer_size_in_bytes will be registered in the module, and will start
   issue read address transfers.  If the the transfer size is larger than 4096
   bytes, multiple transactions will be issued.  There may be up to the
   C_MAX_OUTSTANDING issued in succession.  Once the limit is hit
   no more read address transfers on the AR channel will be issued until
   R channel transactions have completed as indicated by the RLAST signal.
4) Read Data will appear on the AXI4-Stream interface (m_axis) as signalled by
   an assertion of the m_axis_tvalid signal.
5) When the final R-channel transaction has completed, the module will assert
   the ctrl_done signal for one cycle.  If a data FIFO is present, data may
   still be present in the FIFO.
6) Jump to step 1.


AXI_WRITE_MASTER
Description: This is an AXI4 write master module example. The module
demonstrates how to issue AXI write transactions to a memory mapped slave.
Given a starting address offset and a transfer size in bytes, it will issue
one or more AXI transactions by generating incrementing AXI write transfers
when data is transfered over the AXI4-Stream interface.

Theory of operation:
It uses a minimum subset of the AXI4 protocol by omitting AXI4 signals that
are not used.  When packaged as a kernel or IP, this allows for optimizations
to occur within the AXI Interconnect system to increase Fmax, potentially
increase performance, and reduce latency/area. When C_INCLUDE_DATA_FIFO is
set to 1, a depth 32 FIFO is provided for extra buffering.

When ctrl_start is asserted, the ctrl_addr_offset (assumed 4kb aligned) and
the transfer size in bytes is registered into the module.  the The bulk of the
logic consists of counters to track how many transfers/transactions have been
issued.  When the transfer size is reached, and all transactions are
committed, then done is asserted.

Usage:
1) assign ctrl_addr_offset to a 4kB aligned starting address.
2) assign ctrl_xfer_size_in_bytes to the size in bytes of the requested transfer.
3) Assert ctrl_start for once cycle.  At the posedge, the ctrl_addr_offset and
ctrl_xfer_size_in_bytes will be registered in the module, and will start
to issue write address transfers when the first data arrives on the s_axis
interface.  If the the transfer size is larger than 4096
bytes, multiple transactions will be issued.
4) As write data is presented on the axi4-stream interface, WLAST and
additional write address transfers will be issued as necessary.
5) When the final B-channel transaction has been received, the module will assert
   the ctrl_done signal for one cycle.  If a data FIFO is present, data may
   still be present in the FIFO.  It will
6) Jump to step 1.


